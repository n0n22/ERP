<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="staffMapper">

	<resultMap id="staffResultSet" type="staff">
		<result column="STAFF_NO" property="staff_no" />
		<result column="STAFF_NAME" property="staff_name" />
		<result column="JUMIN_NO" property="jumin_no" />
		<result column="DEPARTMENT_NAME" property="department_name" />
		<result column="GRADUATE_DAY" property="graduate_day" />
	</resultMap>
	
	<resultMap id="staffCollectionResultSet" type="staff">
		<result column="STAFF_NO" property="staff_no" />
		<result column="STAFF_NAME" property="staff_name" />
		<result column="JUMIN_NO" property="jumin_no" />
		<result column="DEPARTMENT_NAME" property="department_name" />
		<result column="GRADUATE_DAY" property="graduate_day" />
		<result column="SCHOOL_NAME" property="school_name" />
		<collection column="SKILL_NAME" property="skill_name" ofType="string" javaType="list">
			<result column="SKILL_NAME" property="skill_name" />
		</collection>
	</resultMap>
	
	
	
	<!-- 사원 등록 - STAFF 테이블 -->
	<insert id="insertStaff" parameterType="staff">
		INSERT
		  INTO
		  	   STAFF
		       (
		        STAFF_NO
				,STAFF_NAME
				,JUMIN_NO
				,SCHOOL_CODE
				,DEPARTMENT_CODE
				,GRADUATE_DAY
		       )
	    VALUES
		       (
		       STAFF_SEQ.NEXTVAL
		       ,#{ staff_name }
		       ,#{ jumin_no }
		       ,(select school_code from code_school where school_name = #{ school_name })
		       ,(select department_code from code_department where department_name = #{ department_name })
		       ,#{ graduate_day }
		       )	
	</insert>
	<!-- 사원 등록 - CODE_SKILL 테이블 -->
	<update id="updateSkill" parameterType="list">
		MERGE 
		 INTO CODE_SKILL C
		USING 
			  (
			  <foreach collection="list" item="item" index="index" separator="UNION ALL" open="(" close=")">
			  	select #{item} as skill_name from dual
			  </foreach>
			  ) S
		   ON (C.SKILL_NAME = S.SKILL_NAME)
		 WHEN NOT MATCHED THEN
		      INSERT 
		      VALUES((select max(skill_code)+1 from code_skill), S.SKILL_NAME)
	</update>
    
    <!-- 사원 등록 - STAFF-SKILL 테이블 -->
    <insert id="insertStaffSkill" parameterType="staff">
    	INSERT
    	  INTO
    	       STAFF_SKILL
		       (
		       STAFF_SKILL_NO
			   ,STAFF_NO
			   ,SKILL_CODE
		       )
			  SELECT
				       STAFF_SKILL_SEQ.NEXTVAL,
				       A.* 
				  FROM 
				       (
					    <foreach item="item" collection="skill_name" separator="UNION ALL " >
					        select 
					               (select max(staff_no) from staff)
					               ,(select skill_code from code_skill where skill_name = #{ item })
					          from 
					               dual
					    </foreach>
			           ) A
    </insert>
    
    <!-- 사원 전체 목록 개수 -->
    <select id="selectAllListCount" resultType="_int">
    	SELECT
    	       COUNT(*)
    	  FROM
    	       STAFF
    </select>

	<!-- 사원 전체 목록 조회 -->
	<select id="selectAllList" parameterType="hashmap" resultMap="staffResultSet">
		SELECT 
			   *
		  FROM 
		       VW_STAFF
		 ORDER
		    BY
		<choose>
			<when test="orderCondition == '번호'">
				staff_no
			</when>
			<when test="orderCondition == '이름'">
				staff_name
			</when>
			<when test="orderCondition == '졸업일'">
				graduate_day
			</when>
		</choose>
		<if test="desc == 'desc'">
			 DESC		
		</if>
	</select>
	
	<!-- 
	
	VW_STAFF : 사원 목록 조회를 위한 VIEW 작성
	
		SELECT 
		       S.STAFF_NO, 
		       STAFF_NAME, 
		       DECODE(substr(jumin_no, 8, 1), '1', '남',  '2', '여', '3', '남', '4', '여') as "JUMIN_NO",
		       DEPARTMENT_NAME,
		       GRADUATE_DAY,
		       S.SCHOOL_CODE
		  FROM 
		       STAFF S
		  JOIN 
		       CODE_DEPARTMENT D ON (S.DEPARTMENT_CODE = D.DEPARTMENT_CODE)
		  JOIN 
		       CODE_SCHOOL C ON (S.SCHOOL_CODE = C.SCHOOL_CODE)

	 -->
	
	<!-- 사원 검색 목록 개수 -->
	<select id="selectStaffCount" parameterType="searchCondition" resultType="_int">
		SELECT
		       COUNT(*)
		  FROM
		       VW_STAFF
		 WHERE
		       STAFF_NAME LIKE '%' || #{staff_name} || '%'
		<if test="jumin_no != 'all'">
		   AND JUMIN_NO = '${jumin_no}'
		</if>
		<if test="department_name != ''">
		   AND DEPARTMENT_NAME = #{department_name}
		</if>
		<if test="school_name != null">
		   AND SCHOOL_CODE IN 
		       (SELECT SCHOOL_CODE 
		          FROM CODE_SCHOOL 
		         WHERE SCHOOL_NAME IN 
			<foreach collection="school_name" item="item" index="index" separator="," open="(" close="))">
                       #{item}
            </foreach>
		</if>
		<if test="skill_name != null">
		   AND STAFF_NO IN
		    <foreach collection="skill_name" item="item" index="index" separator="INTERSECT" open="(" close=")">
			   select staff_no
			     from staff_skill
			    where skill_code in (select skill_code from code_skill where skill_name = #{item})
            </foreach>
		</if>
		<if test="skill_name == null and skill_name2 != null">
		   AND STAFF_NO IN
							(
							   select staff_no
							     from staff_skill
							    where skill_code in 
							    (select skill_code from code_skill where skill_name in
			<foreach collection="skill_name2" item="item" index="index" separator="," open="(" close=")))">
                       			#{item}
            </foreach>
		</if>
		<if test="skillCondition == '필수'">
		   AND STAFF_NO IN
		    <foreach collection="skill_name2" item="item" index="index" separator="INTERSECT" open="(" close=")">
						   select staff_no
						     from staff_skill
						    where skill_code in (select skill_code from code_skill where skill_name = #{item})
            </foreach>
		</if>
		<if test="graduate_day1 != ''">
		   AND GRADUATE_DAY BETWEEN #{graduate_day1} AND #{graduate_day2}
		</if>
	</select>

	<!-- 사원 검색 목록 -->
	<select id="selectStaff" parameterType="searchCondition" resultMap="staffResultSet">
		SELECT
		       STAFF_NO, 
		       STAFF_NAME, 
		       JUMIN_NO,
		       DEPARTMENT_NAME,
		       GRADUATE_DAY
		  FROM
		       VW_STAFF
		 WHERE
		       STAFF_NAME LIKE '%' || #{staff_name} || '%'
		<if test="jumin_no != 'all'">
		   AND JUMIN_NO = '${jumin_no}'
		</if>
		<if test="department_name != ''">
		   AND DEPARTMENT_NAME = #{department_name}
		</if>
		<if test="school_name != null">
		   AND SCHOOL_CODE IN 
		       (SELECT SCHOOL_CODE 
		          FROM CODE_SCHOOL 
		         WHERE SCHOOL_NAME IN 
			<foreach collection="school_name" item="item" index="index" separator="," open="(" close="))">
                       #{item}
            </foreach>
		</if>
		<if test="skill_name != null">
		   AND STAFF_NO IN
		    <foreach collection="skill_name" item="item" index="index" separator="INTERSECT" open="(" close=")">
			   select staff_no
			     from staff_skill
			    where skill_code in (select skill_code from code_skill where skill_name = #{item})
            </foreach>
		</if>
		<if test="skill_name == null and skill_name2 != null">
		   AND STAFF_NO IN
							(
							   select staff_no
							     from staff_skill
							    where skill_code in 
							    (select skill_code from code_skill where skill_name in
			<foreach collection="skill_name2" item="item" index="index" separator="," open="(" close=")))">
                       			#{item}
            </foreach>
		</if>
		<if test="skillCondition == '필수'">
		   AND STAFF_NO IN
		    <foreach collection="skill_name2" item="item" index="index" separator="INTERSECT" open="(" close=")">
						   select staff_no
						     from staff_skill
						    where skill_code in (select skill_code from code_skill where skill_name = #{item})
            </foreach>
		</if>
		<if test="graduate_day1 != ''">
		   AND GRADUATE_DAY BETWEEN #{graduate_day1} AND #{graduate_day2}
		</if>
		 ORDER
		    BY
		<choose>
			<when test="orderCondition == '번호'">
				staff_no
			</when>
			<when test="orderCondition == '이름'">
				staff_name
			</when>
			<when test="orderCondition == '졸업일'">
				graduate_day
			</when>
		</choose>
		<if test="desc == 'desc'">
			 DESC		
		</if>
	</select>

	
	
	
	<!-- 
	
	VW_STAFF_INFO : 사원 상세 정보를 위한 View 생성

		select
				S.STAFF_NO,
				S.STAFF_NAME,
				S.JUMIN_NO,
				D.DEPARTMENT_NAME,
				CC.SCHOOL_NAME,
				CS.SKILL_NAME,
				S.GRADUATE_DAY
		from
				staff S
		join code_department D on(S.department_code = D.department_code)
		join staff_skill SS on(S.staff_no = SS.staff_no)
		join code_skill CS on(SS.skill_code = CS.skill_code)
		join code_school CC on(S.school_code = CC.school_code)
	
	 -->
	
	
	<!-- 사원 상세 정보 검색 -->
	<select id="staffCollectionResultSet" parameterType="_int" resultMap="staffCollectionResultSet">
		SELECT
		  	   *
		  FROM
		       VW_STAFF_INFO
		 WHERE
		       STAFF_NO = #{staff_no}
	</select>
	
	<!-- 
	<select id="selectStaffSkill" resultType="string" parameterType="_int">
		SELECT
		       SKILL_NAME
		  FROM
		       STAFF_SKILL S
		  JOIN
		       CODE_SKILL C ON (S.SKILL_CODE = C.SKILL_CODE)
	</select>
	-->
	
	
	<!-- 사원 정보 수정 -->
	<update id="updateStaff" parameterType="staff">
		UPDATE 
		       (
				select
						S.STAFF_NO,
						S.STAFF_NAME,
						S.JUMIN_NO,
						S.DEPARTMENT_CODE,
						S.SCHOOL_CODE,
						S.GRADUATE_DAY
				  from
						staff S
						join code_department D on(S.department_code = D.department_code)
						join code_school CC on(S.school_code = CC.school_code)
			   )
		   SET
			   STAFF_NAME = #{staff_name},
			   JUMIN_NO = #{jumin_no},
			   DEPARTMENT_CODE = (select department_code from code_department where department_name = #{department_name}),
			   SCHOOL_CODE = (select school_code from code_school where school_name = #{school_name}),
			   GRADUATE_DAY = #{graduate_day}
	     WHERE 
	           STAFF_NO = #{staff_no}
	</update>
	
	
	
	
	<!-- 사원 스킬 삭제 -->
	<delete id="deleteStaffSkills" parameterType="_int">
		DELETE
		  FROM
		       STAFF_SKILL
		 WHERE
		       STAFF_NO = #{staff_no}	
	</delete>
	
	
	
	<!-- 사원 정보 삭제 -->
	<delete id="deleteStaff" parameterType="_int">
		DELETE
		  FROM
		       STAFF
		 WHERE
		       STAFF_NO = #{staff_no}
	</delete>
	
	
	<!-- 기술 목록 조회 -->
	<select id="selectSkill" resultType="string">
		SELECT
		       SKILL_NAME
		  FROM
		       CODE_SKILL
		 WHERE
		       SKILL_NAME NOT IN ('Java', 'JSP', 'ASP', 'PHP', 'Delphi')
	</select>
	
	
	
	

</mapper>





